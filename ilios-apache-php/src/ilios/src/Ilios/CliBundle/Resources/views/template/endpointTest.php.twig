<?php

namespace Tests\IliosApiBundle\Endpoints;

use Tests\IliosApiBundle\AbstractEndpointTest;
use Tests\IliosApiBundle\EndpointTestsTrait;

/**
 * {{ entity }} API endpoint Test.
 * @group api_{{ groupNumber }}
 */
class {{ entity }}Test extends AbstractEndpointTest
{
    use EndpointTestsTrait;

    protected $testName =  '{{ entity[:1]|lower ~ entity[1:] }}';


    /**
     * @inheritdoc
     */
    protected function getFixtures()
    {
        return [
            'Tests\CoreBundle\Fixture\Load{{ entity }}Data',
        ];
    }

    /**
     * @inheritDoc
     */
    public function putsToTest()
    {
        return [
{% for property in puts %}
{% if property.type == 'entityCollection' %}
            '{{ property.name }}' => ['{{ property.name }}', [1]],
{%  elseif property.type == 'boolean' %}
            '{{ property.name }}' => ['{{ property.name }}', false],
{%  elseif property.type == 'integer' %}
            '{{ property.name }}' => ['{{ property.name }}', $this->getFaker()->randomDigit],
{%  elseif property.type == 'dateTime' %}
            '{{ property.name }}' => ['{{ property.name }}', $this->getFaker()->iso8601],
{%  elseif property.type == 'entity' %}
            '{{ property.name }}' => ['{{ property.name }}', 1],
{%  else %}
            '{{ property.name }}' => ['{{ property.name }}', $this->getFaker()->text],
{% endif %}
{% endfor %}
        ];
    }

    /**
     * @inheritDoc
     */
    public function readOnlyPropertiesToTest()
    {
        return [
{% for property in readOnlies %}
{% if property.type == 'entityCollection' %}
            '{{ property.name }}' => ['{{ property.name }}', 1, [2]],
{%  elseif property.type == 'boolean' %}
            '{{ property.name }}' => ['{{ property.name }}', 1, false],
{%  else %}
            '{{ property.name }}' => ['{{ property.name }}', 1, 99],
{% endif %}
{% endfor %}
        ];
    }

    /**
     * @inheritDoc
     */
    public function filtersToTest()
    {
        return [
{% for property in filters %}
{% if property.type == 'entityCollection' %}
            '{{ property.name }}' => [[0], ['{{ property.name }}' => [1]]],
{%  elseif property.type == 'boolean' %}
            '{{ property.name }}' => [[0], ['{{ property.name }}' => false]],
{%  elseif property.type == 'integer' %}
            '{{ property.name }}' => [[0], ['{{ property.name }}' => 1]],
{%  elseif property.type == 'entity' %}
            '{{ property.name }}' => [[0], ['{{ property.name }}' => 1]],
{%  else %}
            '{{ property.name }}' => [[0], ['{{ property.name }}' => 'test']],
{% endif %}
{% endfor %}
        ];
    }

}
